@page "/chatroom"
@inject NavigationManager navigationManager
@inject LDAP_LOGIN.Data.LoginActiveDirectory logindata
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.AspNetCore.SignalR.Client;

<h1>AD Chat</h1>
<hr />

@if (!_isChatting)
{
    @if (logindata.loggedIn && (logindata.role == "Vip" || logindata.username == "Administrator"))
    {
        <p>Click to connect to chatroom</p>
        <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
    }
    else
    {
        <p>You need to be logged in to connect to the chat and be a vip</p>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>[@logindata.role] @logindata.username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}

@code {
    private bool _isChatting = false;

    private string _newMessage;

    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task Chat()
    {
        try
        {
            _isChatting = true;
            await Task.Delay(1);

            _messages.Clear();

            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + Data.Chat.HubUrl;

            _hubConnection = new HubConnectionBuilder().WithUrl(_hubUrl).Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {logindata.username} joined chat room.");
        }
        catch (Exception e)
        {
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(logindata.username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {logindata.username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", logindata.username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }

    protected override async Task OnInitializedAsync()
    {
        if (!logindata.loggedIn)
        {
            logindata.username = await localStorage.GetItemAsync<string>("username");
            logindata.password = await localStorage.GetItemAsync<string>("password");
            logindata.AuthCheck();
        }

        if (logindata.loggedIn && (logindata.role == "Vip" || logindata.username == "Administrator"))
        {
            await Chat();
        }
        else
        {
            await DisconnectAsync();
        }
    }
}